{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "atlas-dev-factory"
		},
		"lnk_atlasdevdb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lnk_atlasdevdb'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=atlasdev001.database.windows.net;Initial Catalog=atlasdevdb;User ID=atlasuser"
		},
		"lnk_dev_keyvalut_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dev-keyvalut-001.vault.azure.net/"
		},
		"lnk_devstorageforatlast_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "key-dev-storage"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/lnk_dev_keyvalut')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('lnk_dev_keyvalut_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_atlasdevdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('lnk_atlasdevdb_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "lnk_dev_keyvalut",
							"type": "LinkedServiceReference"
						},
						"secretName": "key-dbpassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_dev_keyvalut')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_devstorageforatlast')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "lnk_dev_keyvalut",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('lnk_devstorageforatlast_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_dev_keyvalut')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DevFilesList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_devstorageforatlast",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "devfiles"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_devstorageforatlast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpFileDynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_devstorageforatlast",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "emp1.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "devfiles"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_devstorageforatlast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlEmpTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_atlasdevdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_atlasdevdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_FixLengthFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_devstorageforatlast",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FixLengthFile.csv",
						"container": "devfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_devstorageforatlast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Scd_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_devstorageforatlast",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Scd1_File1.csv",
						"container": "devfiles"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "ConainerName",
						"type": "String"
					},
					{
						"name": "POL",
						"type": "String"
					},
					{
						"name": "POD",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_devstorageforatlast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dynamicTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_atlasdevdb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_atlasdevdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_runningtotal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_devstorageforatlast",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RunningTotal.csv",
						"container": "devfiles"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "pid",
						"type": "String"
					},
					{
						"name": "Pname",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_devstorageforatlast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sales_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_devstorageforatlast",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Sal.csv",
						"container": "devfiles"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_devstorageforatlast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sales_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_atlasdevdb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableNames": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableNames",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_atlasdevdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Latest File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata List Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DevFilesList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach Find Latest Date",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata List Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata List Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata Actual File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "EmpFileDynamic",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata Actual File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata Actual File').output.lastModified,variables('PrevModifiedDate'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "LatstedFile",
													"value": {
														"value": "@activity('Get Metadata Actual File').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "PrevModifiedDate",
										"value": {
											"value": "@activity('Get Metadata Actual File').output.lastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach Find Latest Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [dbo].[emp1]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EmpFileDynamic",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('LatstedFile')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlEmpTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"PrevModifiedDate": {
						"type": "String",
						"defaultValue": "2000-01-08T05:15:39Z"
					},
					"LatstedFile": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-08T07:36:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DevFilesList')]",
				"[concat(variables('factoryId'), '/datasets/EmpFileDynamic')]",
				"[concat(variables('factoryId'), '/datasets/SqlEmpTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP Load Latest File For Todays Date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@concat(formatDateTime(utcnow(),'yyyy-MM-dd'),'T00:00:00.000')",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@concat(formatDateTime(utcnow(),'yyyy-MM-dd'),'T23:59:59.000')",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DevFilesList",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlEmpTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-08T05:24:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DevFilesList')]",
				"[concat(variables('factoryId'), '/datasets/SqlEmpTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_Load_Sales_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "vid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "vendorname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vendorname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Salary",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "SalaryDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalaryDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sales_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sales_table",
								"type": "DatasetReference",
								"parameters": {
									"TableNames": "Sales"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sales_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sales_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FixLengthFile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_FixLengthFile",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dynamicTable",
								"type": "DatasetReference"
							},
							"name": "sinkTable"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnForSeprateColumns"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Pid = substring(Column_1,1,4),",
						"          ProductName = substring(Column_1,5,8),",
						"          Quantity = substring(Column_1,13,6),",
						"          Amount = substring(Column_1,19,5)) ~> derivedColumnForSeprateColumns",
						"derivedColumnForSeprateColumns select(mapColumn(",
						"          Pid,",
						"          ProductName,",
						"          Quantity,",
						"          Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FixLengthFile')]",
				"[concat(variables('factoryId'), '/datasets/ds_dynamicTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Scd_File",
								"type": "DatasetReference"
							},
							"name": "sourcescdFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dynamicTable",
								"type": "DatasetReference"
							},
							"name": "sinksqltable"
						}
					],
					"transformations": [
						{
							"name": "alterRowForSCDFiles"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as integer,",
						"          ConainerName as string,",
						"          POL as string,",
						"          POD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcescdFiles",
						"sourcescdFiles alterRow(upsertIf(1==1)) ~> alterRowForSCDFiles",
						"alterRowForSCDFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          cid,",
						"          ConainerName,",
						"          POL,",
						"          POD",
						"     )) ~> sinksqltable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Scd_File')]",
				"[concat(variables('factoryId'), '/datasets/ds_dynamicTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_runningtotal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_runningtotal",
								"type": "DatasetReference"
							},
							"name": "sourcerunningtotalcsvfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dynamicTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          pid as string,",
						"          Pname as string,",
						"          qty as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcerunningtotalcsvfile",
						"sourcerunningtotalcsvfile window(asc(pid, true),",
						"     RunningTotal = sum(qty)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_runningtotal')]",
				"[concat(variables('factoryId'), '/datasets/ds_dynamicTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sales_csv",
								"type": "DatasetReference"
							},
							"name": "SalesFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sales_table",
								"type": "DatasetReference"
							},
							"name": "Saleserror"
						},
						{
							"dataset": {
								"referenceName": "ds_sales_table",
								"type": "DatasetReference"
							},
							"name": "Sales"
						}
					],
					"transformations": [
						{
							"name": "SplitforBestRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          vid as string,",
						"          vendorname as string,",
						"          Salary as string,",
						"          SalaryDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesFile",
						"SalesFile split(isNull(toDate(SalaryDate,'yyyy-MM-dd')),",
						"     disjoint: false) ~> SplitforBestRows@(error, Proper)",
						"SplitforBestRows@error sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Saleserror",
						"SplitforBestRows@Proper sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Sales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sales_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sales_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_Df_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sales_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesFile": {},
									"Saleserror": {
										"TableNames": "Saleserror"
									},
									"Sales": {
										"TableNames": "Sales"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sales_df')]"
			]
		}
	]
}